plugins {
    id 'com.android.application'
    id 'com.gladed.androidgitversion' version '0.4.14'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.breadmoirai.github-release' version '2.5.2'
    id 'com.diffplug.spotless' version '7.0.2'
    id 'org.jetbrains.kotlin.android'
    id("io.qameta.allure") version "2.12.0"
}

def allureVersion = "2.16.0"
def aspectJVersion = '1.9.21'

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }

    all {
        exclude module: 'httpclient'
    }

}

android {
    def keystorePropertiesFile = rootProject.file("keystore.properties")

    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    } else {
        println("Warning: keystore.properties file not found. Skipping signing configuration.")
    }

    def testPropertiesFile = rootProject.file("test.properties")
    def testProperties = new Properties()

    if (testPropertiesFile.exists()) {
        testProperties.load(new FileInputStream(testPropertiesFile))
    } else {
        println("Warning: test.properties file not found. Using default test values.")
    }

    lintOptions {
        checkReleaseBuilds false
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def appName = "continuum"
            def baseAbiVersion = output.getFilter(com.android.build.OutputFile.ABI)
            def buildType = variant.buildType
            def versionCode = variant.versionCode
            def versionName = variant.versionName
            def artifactName = "${appName}-${versionName}(${versionCode})"

            if (buildType == "debug") {
                artifactName = "${appName}-${buildType}-${baseAbiVersion}-${versionName}"
            } else {
                artifactName = "${appName}-${baseAbiVersion}-${versionName}"
            }

            // Assign the apk filename
            output.outputFileName = "${artifactName}.apk"
        }
    }

    compileSdk 35

    defaultConfig {
        applicationId "org.cygnusx1.continuum"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [eventBusIndex: 'ml.docilealligator.infinityforreddit.EventBusIndex']
            }
        }

        minSdk 21
        targetSdk 35
        versionCode 198
        versionName "8.0.2.1"
        testInstrumentationRunner "com.kaspersky.kaspresso.runner.KaspressoRunner"
        testInstrumentationRunnerArguments.put("REDDIT_CLIENT_ID", testProperties['REDDIT_CLIENT_ID'] ?: 'test_reddit_client_id_default')
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            } else {
                println("Warning: keystore.properties file not found. Skipping signing configuration for release.")
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "Continuum"
            signingConfig signingConfigs.debug
        }
        minifiedRelease {
            initWith buildTypes.release
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            resValue "string", "app_name", "Continuum Debug"
        }
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    testOptions {
        animationsDisabled true
        //execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.returnDefaultValues = true
        unitTests.all {
            useJUnitPlatform()
        }
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    lint {
        baseline = file("lint-baseline.xml")
        disable 'MissingTranslation'
    }

    namespace 'ml.docilealligator.infinityforreddit'

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk false  // Set to true if you also want a universal APK
        }
    }

    kotlinOptions {
        jvmTarget = '21'
    }
}

def githubPropertiesFile = rootProject.file("github.properties")

if (githubPropertiesFile.exists()) {
    def githubProperties = new Properties()
    githubProperties.load(new FileInputStream(githubPropertiesFile))

    githubRelease {
        def releaseNotes = System.getenv("RELEASE_NOTES") ?: "Automated release of version ${android.defaultConfig.versionName ?: "default-version"}"

        token = githubProperties["githubToken"]
        owner = "cygnusx-1-org"
        repo = "continuum"
        tagName = android.defaultConfig.versionName ?: "default-version"
        targetCommitish = "master"
        releaseName = "Release ${android.defaultConfig.versionName ?: "default-version"}"
        body = "$releaseNotes"
        draft = false
        prerelease = false
        overwrite = false

        // Dynamically set releaseAssets by searching the APK path
        def apkFiles = fileTree(dir: "build/outputs/apk/release/", include: "*.apk").files.toList()
        if (apkFiles.isEmpty()) {
            println("Warning: No APK files found in the directory 'build/outputs/apk/release/'.")
        } else {
            releaseAssets = apkFiles
        }
    }
} else {
    println("Warning: github.properties file not found. Skipping GitHub release configuration.")
}
dependencies {
/** AndroidX **/
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.biometric:biometric:1.2.0-alpha05'
    implementation 'androidx.browser:browser:1.8.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.activity:activity:1.10.1'
    implementation 'androidx.fragment:fragment:1.8.8'
    implementation 'androidx.core:core-ktx:1.16.0'
    def lifecycleVersion = "2.7.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion"

    def pagingVersion = '3.3.0'
    implementation "androidx.paging:paging-runtime:$pagingVersion"
    implementation "androidx.paging:paging-guava:$pagingVersion"
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    def roomVersion = "2.6.1"
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-guava:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation 'androidx.viewpager2:viewpager2:1.1.0'
    implementation 'androidx.work:work-runtime:2.9.0'
    implementation 'com.google.android.material:material:1.14.0-alpha01'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-beta01"

/** ExoPlayer **/
    def media3_version = "1.4.0-alpha02"
    implementation "androidx.media3:media3-exoplayer:$media3_version"
    implementation "androidx.media3:media3-exoplayer-dash:$media3_version"
    implementation "androidx.media3:media3-exoplayer-hls:$media3_version"
    implementation "androidx.media3:media3-ui:$media3_version"
    implementation "androidx.media3:media3-exoplayer-smoothstreaming:$media3_version"
    implementation "androidx.media3:media3-datasource-okhttp:$media3_version"

/** Third-party **/

/**** Backend logic ****/

    // HTTP clients
    def retrofitVersion = '2.11.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-guava:$retrofitVersion"
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    // Dependency injection
    def daggerVersion = '2.51.1'
    implementation "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    // Binding
    compileOnly 'com.android.databinding:viewbinding:8.5.1'

    // Events
    def eventbusVersion = "3.3.1"
    implementation "org.greenrobot:eventbus:$eventbusVersion"
    annotationProcessor "org.greenrobot:eventbus-annotation-processor:$eventbusVersion"

    // TransactionTooLargeException avoidance
    implementation 'com.github.livefront:bridge:v2.0.2'

    // Bundle-saving without boilerplate
    // NOTE: Deprecated
    def stateVersion = "1.4.1"
    implementation "com.evernote:android-state:$stateVersion"
    annotationProcessor "com.evernote:android-state-processor:$stateVersion"

    // Object to JSON
    // NOTE: Replace with Squareup's Moshi?
    implementation 'com.google.code.gson:gson:2.11.0'

    // Java library for zip files and streams
    implementation 'net.lingala.zip4j:zip4j:2.11.5'

    // IO functionality
    implementation 'commons-io:commons-io:2.16.1'

    // Crash reporting
    implementation 'com.github.FunkyMuse:Crashy:1.2.0'


/**** User Interface (frontend) ****/

    //Image loading
    def glideVersion = "4.16.0"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"
    implementation 'jp.wasabeef:glide-transformations:4.3.0'
    implementation 'com.github.santalu:aspect-ratio-imageview:1.0.9'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.29'
    def bivVersion = "1.8.1"
    implementation "com.github.piasy:BigImageViewer:$bivVersion"
    implementation "com.github.piasy:GlideImageLoader:$bivVersion"

    // Markdown
    def markwonVersion = "4.6.2"
    implementation "io.noties.markwon:core:$markwonVersion"
    implementation "io.noties.markwon:ext-strikethrough:$markwonVersion"
    implementation "io.noties.markwon:linkify:$markwonVersion"
    implementation "io.noties.markwon:recycler-table:$markwonVersion"
    implementation "io.noties.markwon:simple-ext:$markwonVersion"
    implementation "io.noties.markwon:inline-parser:$markwonVersion"
    implementation "io.noties.markwon:image-glide:$markwonVersion"
    implementation 'com.atlassian.commonmark:commonmark-ext-gfm-tables:0.14.0'
    implementation 'me.saket:better-link-movement-method:2.2.0'

    // Animations
    implementation 'com.airbnb.android:lottie:6.4.1'

    // Loading ProgressBar
    implementation 'com.lsjwzh:materialloadingprogressbar:0.5.8-RELEASE'

    // Customizable TextView
    implementation files("Modules/customtextview-2.1.aar")

    // Dismiss gesturing
    implementation 'app.futured.hauler:hauler:5.0.0'

    // FlowLayout (auto-spacing)
    implementation 'com.nex3z:flow-layout:1.3.3'

    // RecyclerView fast scrolling
    implementation 'me.zhanghai.android.fastscroll:library:1.3.0'

    implementation 'com.otaliastudios:zoomlayout:1.9.0'

    implementation 'androidx.core:core-splashscreen:1.0.1'

    implementation 'com.giphy.sdk:ui:2.3.15'

    // QR code scanner
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'

    implementation 'com.github.alexzhirkevich:custom-qr-generator:2.0.0-alpha01'


/**** Builds and flavors ****/
    // debugImplementation because LeakCanary should only run in debug builds.
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:x.y'

    testImplementation platform("io.qameta.allure:allure-bom:$allureVersion")
    testImplementation "io.qameta.allure:allure-junit5"
    agent "org.aspectj:aspectjweaver:$aspectJVersion"

    androidTestImplementation "androidx.test.ext:junit:1.0.0"
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation "androidx.test:runner:1.5.0"

    androidTestImplementation 'com.kaspersky.android-components:kaspresso:1.5.3'
    androidTestUtil "androidx.test:orchestrator:1.5.1"
    // Allure support
    androidTestImplementation "com.kaspersky.android-components:kaspresso-allure-support:1.5.3"
}

spotless {
    java {
        target '**/*.java'
        removeUnusedImports()
        trimTrailingWhitespace()
        leadingTabsToSpaces(4)
    }
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
    }
    format 'xml', {
        target '**/*.xml'
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
    }
}
